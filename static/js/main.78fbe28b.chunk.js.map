{"version":3,"sources":["views/assets/dofus.png","components/ApiUrl.js","views/Clase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ApiUrl","identify","Clase","props","state","error","isLoaded","data","children","this","fetch","then","res","json","result","setState","name","femaleImg","roles","console","log","message","listRoles","map","rol","key","className","src","img_title","alt","type","Component","App","arrId","array","i","length","j","Math","floor","random","shuffleArray","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.78fbe28b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dofus.4a069183.png\";","function ApiUrl(identify) {\n  const urlBase = \"https://fr.dofus.dofapi.fr/classes/\";\n  const url = `${urlBase}${identify}`;\n\n  return url;\n}\n\nexport default ApiUrl;\n","import React, { Component } from \"react\";\nimport ApiUrl from \"../components/ApiUrl\";\nimport \"./styles/Clase.css\";\nimport img_title from \"../views/assets/dofus.png\";\n\nexport default class Clase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    const children = this.props.children;\n    fetch(ApiUrl(children))\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            data: result,\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n\n  render() {\n    const { error, isLoaded } = this.state;\n    const { name, femaleImg, roles } = this.state.data;\n    if (error) {\n      console.log(error.message);\n      return <h1>Oops, data no disponible</h1>;\n    } else if (!isLoaded) {\n      return <h1>Loading...</h1>;\n    } else {\n      const listRoles = roles.map((rol) => <li key={rol}>{rol}</li>);\n      console.log(this.state.data);\n      return (\n        <div className=\"class-item\">\n          <div className=\"class-item__title\">\n            <img src={img_title} alt=\"title\" />\n            <h1>{name}</h1>\n          </div>\n          <img className=\"class-item__image\" src={femaleImg} alt=\"class img\" />\n          <div className=\"class-item__details\">\n            <button type=\"button\" className=\"class-item__button__male\"></button>\n            <ul>{listRoles}</ul>\n            <button\n              type=\"button\"\n              className=\"class-item__button__female\"\n            ></button>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Clase from \"./views/Clase\";\n\nfunction App() {\n  const arrId = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n  shuffleArray(arrId);\n  console.log(arrId);\n  return (\n    <div>\n      <div className=\"App\">\n        <Clase children={arrId[0]} />\n        <Clase children={arrId[1]} />\n        <Clase children={arrId[2]} />\n        <Clase children={arrId[3]} />\n        <Clase children={arrId[4]} />\n      </div>\n      <div className=\"App\">\n        <Clase children={arrId[5]} />\n        <Clase children={arrId[6]} />\n        <Clase children={arrId[7]} />\n        <Clase children={arrId[8]} />\n        <Clase children={arrId[9]} />\n      </div>\n      <div className=\"App\">\n        <Clase children={arrId[10]} />\n        <Clase children={arrId[11]} />\n        <Clase children={arrId[12]} />\n        <Clase children={arrId[13]} />\n        <Clase children={arrId[14]} />\n      </div>\n      <div className=\"App\">\n        <Clase children={arrId[15]} />\n        <Clase children={arrId[16]} />\n        <Clase children={arrId[17]} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}